### PT-BR (üáßüá∑): 
# Escreva um programa que leia um n√∫mero e verifique se √© ou n√£o um n√∫mero primo.
# Para fazer essa verifica√ß√£o, calcule o resto da divis√£o do n√∫mero por 2 e depois por todos os n√∫meros √≠mpares at√© o n√∫mero lido.
# Se o resto de uma dessas divis√µes for igual a zero, o n√∫mero n√£o √© primo.
# Observe que 0 e 1 n√£o s√£o primos e que 2 √© o √∫nico n√∫mero primo que √© par.

### EN (üá∫üá∏):
# Write a program that reads a number and checks whether it is a prime number or not.
# To perform this check, calculate the remainder of the division of the number by 2 
# and then by all odd numbers up to the given number.
# If the remainder of any of these divisions is zero, the number is not prime.

### Etapas:
# 1) Ler o n√∫mero do usu√°rio
# 2) Verificar os primeiros casos triviais (n√∫meros menores que 2).
# 3) Testar divisibilidade por 2 e por todos os n√∫meros √≠mpares at√© ele mesmo.
# 4) Exibir o resultado, informando se o n√∫mero √© primo ou n√£o.

numero = int(input("Informe um n√∫mero inteiro positivo qualquer: "))

if numero < 2:
    print("O n√∫mero informado n√£o √© primo.")
elif numero == 2:
    print("O n√∫mero √© primo!")

# Se o n√∫mero for par e maior que 2, ele n√£o √© primo
if numero % 2 == 0 and numero > 2:
    print("O n√∫mero n√£o √© primo")
else:
    primo = True # Assume que o n√∫mero √© primo at√© que se prove o contr√°rio
    divisor = 3 # come√ßa testando a partir do n√∫mero 3, pois vamos ignorar os pares

    while divisor < numero: # Testa at√© um n√∫mero antes do pr√≥prio n√∫mero
        if numero % divisor == 0: # Se o n√∫mero for divis√≠vel por "divisor", n√£o √© primo
            primo = False
            break # Sai do loop, pois j√° sabemos que n√£o √© primo
        divisor += 2 # Incrementa de 2 em 2 para testar apenas n√∫meros √≠mpares

    # Se "primo" continuar True, ent√£o o n√∫mero √© primo
    if primo:
        print("O n√∫mero √© primo.")
    else:
        print("O n√∫mero n√£o √© primo.")